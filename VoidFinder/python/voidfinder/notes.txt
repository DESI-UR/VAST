





Pseudo-Code VoidFinder outline:



Setup_GalaxyMap()

EnterWorker()

for ijk_batch in ijk_generator:

    main_algorithm()
    
        for hole_ijk in ijk_batch:
        
            hole_center = hole_ijk location converted to xyz
            
            ##################################################
            # Find G1
            ##################################################
            
            G1 = _query_first()
            
            ##################################################
            # Find G2
            ##################################################

            propagation_direction = G1 - hole_center <- POINTS TOWARDS G1
            
            hole_center_2_3 starts at ijk cell location
            
            find_next_galaxy(direction_mod=-1.0) <- Want to move hole center AWAY from G1
            
                hole_center starts at ijk cell location
                
                temp_hole_center moves in unit vector direction by dr (AWAY from G1 since direction_mod is fixing direction)
                
                search_radius = distance(moved hole center to G1)
                
                potential_neighbors = _query_shell_radius(moved_hole_center
                                                          search_radius)
                                                          
                since we're jumping by increments of dr, we might not get the exact neighbor
                galaxy in 1 shot, we might get a group of candidates
                
                for each neighbor, calculate the following ratio:
                
                (distance from neighbor to G1)^2 / 2* (distance from neighbor to G1).propogation_direction
                
                smaller values of this ratio mean points are more aligned with the propagation direction,
                so choose the one with the smallest positive ratio to be G2 (negative ratio would mean that
                the potential neighbor is "behind" G1, which should never happen).  Using vectors which
                point from candidate-> G1 because unit vector is also pointing towards G1 at this time
                
            G2 = find_next_output
            
            ##################################################
            # Find G3
            ##################################################
            
            calculate exact circle center using G1, G2, and propagation direction
            
            move hole_center to that position
            
            calculate new unit_vector direction, uses the line which runs through
            the midpoint of k1g and k2g and the center of the circle we found
            points AWAY from the k1g and k2g this time so next we use direction_mod = 1.0
            
            propagation_direction = bisect k1g and k2g point AWAY this time
            
            find_next_galaxy(direction_mod=1.0)
            
                moved_hole_center by dr*propagation_direction
                
                search_radius = distance(moved_hole_center to G1)
                
                potential_neighbors = _query_shell_radius(moved_hole_center
                                                          search_radius)
                                                          
                #MORE
                #STUFF
                #HERE
            
            G3 = find_next_output
            
            ##################################################
            # Find G4-a
            ##################################################
            
            Update hole center using magic minx3 value
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                                        